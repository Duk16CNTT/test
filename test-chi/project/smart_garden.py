import sys
import time
import random
import tkinter as tk
import paho.mqtt.client as mqtt
from display import Display  # Qu·∫£n l√Ω LCD 16x2
from sensors import Sensors  # Qu·∫£n l√Ω c·∫£m bi·∫øn DHT22

try:
    from EmulatorGUI import GPIO  # Th∆∞ vi·ªán gi·∫£ l·∫≠p c·ªßa b·∫°n
    print("\U0001F5A5Ô∏è ƒêang ch·∫°y gi·∫£ l·∫≠p v·ªõi EmulatorGUI")
except ImportError:
    import RPi.GPIO as GPIO  # type: ignore
    print("\U0001F353 Ch·∫°y tr√™n Raspberry Pi")

GPIO.setmode(GPIO.BCM)

SENSOR_SOIL_MOISTURE = 17
PUMP_WATER = 27
VALVE_NUTRIENT = 22
LED_INDICATOR = 25

GPIO.setup(SENSOR_SOIL_MOISTURE, GPIO.IN)
GPIO.setup(PUMP_WATER, GPIO.OUT)
GPIO.setup(VALVE_NUTRIENT, GPIO.OUT)
GPIO.setup(LED_INDICATOR, GPIO.OUT)

BROKER = "mqtt.eclipseprojects.io"
TOPIC_SENSORS = "garden/sensors"
TOPIC_CONTROL = "garden/control"

class SmartGardenGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("\U0001F331 H·ªá th·ªëng chƒÉm b√≥n c√¢y t·ª± ƒë·ªông")

        self.client = mqtt.Client()
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        self.client.connect(BROKER, 1883, 60)
        self.client.loop_start()

        self.soil_threshold = 30  
        self.hum_threshold = 40   

        self.temp_label = tk.Label(self.root, text="\U0001F321 Nhi·ªát ƒë·ªô: --¬∞C", font=("Arial", 14))
        self.hum_label = tk.Label(self.root, text="\U0001F4A7 ƒê·ªô ·∫©m kh√¥ng kh√≠: --%", font=("Arial", 14))
        self.soil_label = tk.Label(self.root, text="\U0001F33F ƒê·ªô ·∫©m ƒë·∫•t: --%", font=("Arial", 14))

        self.pump_status_label = tk.Label(self.root, text="\U0001F6B0 M√°y b∆°m: T·∫ÆT", font=("Arial", 14), fg="red")
        self.nutrient_status_label = tk.Label(self.root, text="\U0001F48A Ph√¢n b√≥n: T·∫ÆT", font=("Arial", 14), fg="red")

        self.soil_threshold_entry = tk.Entry(self.root, font=("Arial", 12))
        self.soil_threshold_entry.insert(0, str(self.soil_threshold))
        self.hum_threshold_entry = tk.Entry(self.root, font=("Arial", 12))
        self.hum_threshold_entry.insert(0, str(self.hum_threshold))
        
        self.update_threshold_button = tk.Button(self.root, text="C·∫≠p nh·∫≠t ng∆∞·ª°ng", command=self.update_threshold, font=("Arial", 12))
        
        self.start_button = tk.Button(self.root, text="\U0001F504 Ch·∫°y h·ªá th·ªëng", command=self.start_system, font=("Arial", 12))
        self.stop_button = tk.Button(self.root, text="‚èπ D·ª´ng h·ªá th·ªëng", command=self.stop_system, font=("Arial", 12))

        self.pump_running = False
        self.nutrient_running = False
        self.running = False

        self.temp_label.pack(pady=5)
        self.hum_label.pack(pady=5)
        self.soil_label.pack(pady=5)
        self.pump_status_label.pack(pady=5)
        self.nutrient_status_label.pack(pady=5)

        tk.Label(self.root, text="Ng∆∞·ª°ng ƒë·ªô ·∫©m ƒë·∫•t (%):").pack()
        self.soil_threshold_entry.pack(pady=5)
        tk.Label(self.root, text="Ng∆∞·ª°ng ƒë·ªô ·∫©m kh√¥ng kh√≠ (%):").pack()
        self.hum_threshold_entry.pack(pady=5)
        self.update_threshold_button.pack(pady=5)

        self.start_button.pack(pady=5)
        self.stop_button.pack(pady=5)

        self.display = Display()
        self.sensors = Sensors()
        self.root.mainloop()

    def update_threshold(self):
        try:
            self.soil_threshold = int(self.soil_threshold_entry.get())
            self.hum_threshold = int(self.hum_threshold_entry.get())
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t ng∆∞·ª°ng: ƒê·ªô ·∫©m ƒë·∫•t={self.soil_threshold}%, ƒê·ªô ·∫©m kh√¥ng kh√≠={self.hum_threshold}%")
        except ValueError:
            print("‚ö†Ô∏è L·ªói: Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho ng∆∞·ª°ng!")

    def on_connect(self, client, userdata, flags, rc):
        print("üîó K·∫øt n·ªëi MQTT th√†nh c√¥ng!")
        client.subscribe(TOPIC_CONTROL)

    def on_message(self, client, userdata, msg):
        message = msg.payload.decode()
        print(f"üì© Nh·∫≠n l·ªánh t·ª´ MQTT: {message}")
        if message == "START":
            self.start_system()
        elif message == "STOP":
            self.stop_system()

    def read_sensors(self):
        temp, hum = self.sensors.read_dht22()
        soil = round(random.uniform(10, 80), 1)
        self.client.publish(TOPIC_SENSORS, f"{temp},{hum},{soil}")
        return temp, hum, soil

    def update_display(self, temp, hum, soil):
        """ C·∫≠p nh·∫≠t GUI & LCD v·ªõi d·ªØ li·ªáu m·ªõi """
        self.temp_label.config(text=f"\U0001F321 Nhi·ªát ƒë·ªô: {temp}¬∞C")
        self.hum_label.config(text=f"\U0001F4A7 ƒê·ªô ·∫©m kh√¥ng kh√≠: {hum}%")
        self.soil_label.config(text=f"\U0001F33F ƒê·ªô ·∫©m ƒë·∫•t: {soil}%")

        pump_status = "ON" if self.pump_running else "OFF"
        nutrient_status = "ON" if self.nutrient_running else "OFF"

        self.pump_status_label.config(text=f"\U0001F6B0 M√°y b∆°m: {pump_status}", fg="green" if self.pump_running else "red")
        self.nutrient_status_label.config(text=f"\U0001F48A Ph√¢n b√≥n: {nutrient_status}", fg="green" if self.nutrient_running else "red")

        print(f"Debug: Pump={pump_status}, Nutrient={nutrient_status}")

        self.display.update(temp, hum, soil, self.pump_running, self.nutrient_running)


    def run_system(self):
        if self.running:
            temp, hum, soil = self.read_sensors()
            
            self.pump_running = soil < self.soil_threshold
            self.nutrient_running = hum < self.hum_threshold
            
            GPIO.output(PUMP_WATER, GPIO.HIGH if self.pump_running else GPIO.LOW)
            GPIO.output(VALVE_NUTRIENT, GPIO.HIGH if self.nutrient_running else GPIO.LOW)
            
            self.update_display(temp, hum, soil)
            self.root.after(3000, self.run_system)

    def start_system(self):
        if not self.running:
            self.running = True
            self.run_system()

    def stop_system(self):
        self.running = False
        GPIO.output(PUMP_WATER, GPIO.LOW)
        GPIO.output(VALVE_NUTRIENT, GPIO.LOW)
        self.pump_status_label.config(text="\U0001F6B0 M√°y b∆°m: T·∫ÆT", fg="red")
        self.nutrient_status_label.config(text="\U0001F48A Ph√¢n b√≥n: T·∫ÆT", fg="red")
        print("‚èπ H·ªá th·ªëng ƒë√£ d·ª´ng")

if __name__ == "__main__":
    SmartGardenGUI()
