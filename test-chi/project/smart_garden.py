import sys
import time
import random
import threading
import queue
import paho.mqtt.client as mqtt
from display import Display  # Qu·∫£n l√Ω LCD 16x2
from sensors import Sensors  # Qu·∫£n l√Ω c·∫£m bi·∫øn DHT22
from pH_sensor import PHSensor  # ƒê·ªçc gi√° tr·ªã t·ª´ c·∫£m bi·∫øn pH th·∫≠t
import os
from flask import Flask, request, jsonify
import requests  # D√πng ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ Flask API
import subprocess
import json  # Th√™m import n√†y ƒë·ªÉ l√†m vi·ªác v·ªõi file JSON
import platform

try:
    from EmulatorGUI import GPIO  # Gi·∫£ l·∫≠p tr√™n Windows
    print("üñ•Ô∏è ƒêang ch·∫°y gi·∫£ l·∫≠p v·ªõi EmulatorGUI")
    IS_RASPBERRY_PI = False
except ImportError:
    import RPi.GPIO as GPIO  # type: ignore
    print("üçì Ch·∫°y tr√™n Raspberry Pi")
    IS_RASPBERRY_PI = True

GPIO.setmode(GPIO.BCM)

# Ch√¢n GPIO
SENSOR_SOIL_MOISTURE = 17
SENSOR_PH = 18
PUMP_WATER = 27
VALVE_NUTRIENT = 22
LED_INDICATOR = 25
LED_BLINK = 5  # Ch√¢n gi·∫£ l·∫≠p LED nh·∫•p nh√°y

GPIO.setup(PUMP_WATER, GPIO.OUT)
GPIO.setup(VALVE_NUTRIENT, GPIO.OUT)
GPIO.setup(LED_INDICATOR, GPIO.OUT)
GPIO.setup(LED_BLINK, GPIO.OUT)

BROKER = "mqtt.eclipseprojects.io"
TOPIC_SENSORS = "garden/sensors"

temp, hum, soil_moisture, ph_value = 0, 0, 0, 0  # L∆∞u gi√° tr·ªã c·∫£m bi·∫øn m·ªõi nh·∫•t
queue_gpio = queue.Queue()  # H√†ng ƒë·ª£i x·ª≠ l√Ω GPIO trong lu·ªìng ch√≠nh

app = Flask(__name__)

def safe_gpio_output(pin, state):
    """ƒê∆∞a c·∫≠p nh·∫≠t GPIO v√†o h√†ng ƒë·ª£i ƒë·ªÉ x·ª≠ l√Ω tr√™n lu·ªìng ch√≠nh."""
    queue_gpio.put((pin, state))

def enable_wifi_ap():
    if IS_RASPBERRY_PI:
        os.system("sudo systemctl start hostapd")
        os.system("sudo systemctl start dnsmasq")
        print("üì° WiFi AP ƒë√£ b·∫≠t!")
    else:
        print("üö´ Kh√¥ng th·ªÉ b·∫≠t WiFi AP tr√™n Windows!")

def disable_wifi_ap():
    if IS_RASPBERRY_PI:
        os.system("sudo systemctl stop hostapd")
        os.system("sudo systemctl stop dnsmasq")
        print("üì¥ WiFi AP ƒë√£ t·∫Øt!")
    else:
        print("üö´ Kh√¥ng th·ªÉ t·∫Øt WiFi AP tr√™n Windows!")

DEFAULT_THRESHOLD = {
    "soil_threshold": 30.0,  # Ng∆∞·ª°ng ƒë·ªô ·∫©m ƒë·∫•t m·∫∑c ƒë·ªãnh (%)
    "ph_min_threshold": 5.5,  # Ng∆∞·ª°ng pH t·ªëi thi·ªÉu m·∫∑c ƒë·ªãnh
    "ph_max_threshold": 7.0   # Ng∆∞·ª°ng pH t·ªëi ƒëa m·∫∑c ƒë·ªãnh
}
    
def run_flask():
    subprocess.Popen(["python", "D:/nh√∫ng/test-chi/project/flask_server.py"])

class SmartGarden:
    def __init__(self):
        self.client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        self.connect_mqtt()

        self.running = True
        self.pump_running = False
        self.nutrient_running = False

        # S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
        self.soil_threshold = DEFAULT_THRESHOLD["soil_threshold"]
        self.ph_min_threshold = DEFAULT_THRESHOLD["ph_min_threshold"]
        self.ph_max_threshold = DEFAULT_THRESHOLD["ph_max_threshold"]

        # ƒê·ªçc c·∫•u h√¨nh t·ª´ file config.json
        self.load_config()

        self.display = Display()
        self.sensors = Sensors()
        self.ph_sensor = PHSensor()

        self.lock = threading.Lock()
        enable_wifi_ap()  # B·∫≠t WiFi khi kh·ªüi ƒë·ªông h·ªá th·ªëng
        self.start_threads()

    def connect_mqtt(self):
        try:
            self.client.connect(BROKER, 1883, 60)
            self.client.loop_start()
            print("‚úÖ K·∫øt n·ªëi MQTT th√†nh c√¥ng!")
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi MQTT: {e}")
            
    def load_config(self):
        """ƒê·ªçc config t·ª´ file JSON"""
        try:
            with open("config.json", "r") as file:
                config = json.load(file)
            print(f"üìÇ ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON: {config}")  # Debug xem file c√≥ g√¨
        
            # G√°n gi√° tr·ªã sau khi ki·ªÉm tra
            self.system_on = config.get("system_on", True)
            print(f"‚úÖ Tr·∫°ng th√°i h·ªá th·ªëng sau khi load: {self.system_on}")  # Debug th√™m

            self.soil_threshold = config.get("soil_threshold", DEFAULT_THRESHOLD["soil_threshold"])
            self.ph_min_threshold = config.get("ph_min_threshold", DEFAULT_THRESHOLD["ph_min_threshold"])
            self.ph_max_threshold = config.get("ph_max_threshold", DEFAULT_THRESHOLD["ph_max_threshold"])
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói ƒë·ªçc file config.json: {e}")
            self.system_on = True  # N·∫øu c√≥ l·ªói, m·∫∑c ƒë·ªãnh b·∫≠t h·ªá th·ªëng

    def save_config(self):
        """L∆∞u tr·∫°ng th√°i v√†o file JSON"""
        try:
            with open("config.json", "w") as file:
                json.dump({
                    "system_on": self.system_on,
                    "soil_threshold": self.soil_threshold,
                    "ph_min_threshold": self.ph_min_threshold,
                    "ph_max_threshold": self.ph_max_threshold
                }, file, indent=4)
                file.flush()  # ƒê·∫£m b·∫£o d·ªØ li·ªáu ghi ngay v√†o file
            print(f"üíæ ƒê√£ l∆∞u c·∫•u h√¨nh: {self.system_on}")  # Debug xem gi√° tr·ªã l∆∞u
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói l∆∞u file config.json: {e}")

    def on_connect(self, client, userdata, flags, rc, properties=None):
        print(f"Connected with result code {rc}")
        client.subscribe(TOPIC_SENSORS)
    
    def on_message(self, client, userdata, msg):
        print(f"üì© MQTT nh·∫≠n: {msg.topic} - {msg.payload.decode()}")

    def read_sensors(self):
        """Lu·ªìng ƒë·ªçc c·∫£m bi·∫øn v√† hi·ªÉn th·ªã"""
        global temp, hum, soil_moisture, ph_value
        while self.running:
            print(f"üü¢ H·ªá th·ªëng ƒëang {'B·∫¨T' if self.system_on else 'T·∫ÆT'}")
            if not self.system_on:
                time.sleep(5)  # N·∫øu h·ªá th·ªëng t·∫Øt, ƒë·ª£i 5 gi√¢y r·ªìi ki·ªÉm tra l·∫°i
                continue

            with self.lock:
                temp = random.uniform(25, 30)
                hum = random.uniform(40, 60)
                soil_moisture = random.uniform(10, 50)
                ph_value = self.ph_sensor.read_ph()

                self.client.publish(TOPIC_SENSORS, f"{temp},{hum},{soil_moisture},{ph_value}")

                print(f"üå° {temp:.1f}¬∞C | üíß {hum:.1f}% | üå± {soil_moisture:.1f}% | ‚öóÔ∏è pH {ph_value:.1f}")
                print(f"üö∞ B∆°m: {'B·∫¨T' if self.pump_running else 'T·∫ÆT'} | üß™ Dinh d∆∞·ª°ng: {'B·∫¨T' if self.nutrient_running else 'T·∫ÆT'}")

                self.display.update(round(temp, 1), round(hum, 1), round(soil_moisture, 1), self.pump_running, self.nutrient_running)

            time.sleep(2)

    def check_system_status(self):
        global system_on
        try:
            response = requests.get("http://127.0.0.1:5000/status")
            system_on = response.json()["system_on"]
        except Exception as e:
            print(f"‚ö† L·ªói k·∫øt n·ªëi API: {e}")

    def control_pump(self):
        """Lu·ªìng ƒëi·ªÅu khi·ªÉn m√°y b∆°m v·ªõi gi·ªõi h·∫°n th·ªùi gian ch·∫°y"""
        global soil_moisture
        pump_timer = 0
        while self.running:
            if not self.system_on:
                safe_gpio_output(PUMP_WATER, False)
                self.pump_running = False
                time.sleep(5)
                continue

            with self.lock:
                if soil_moisture < self.soil_threshold:
                    if not self.pump_running:
                        pump_timer = time.time()  # B·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian ch·∫°y b∆°m
                    safe_gpio_output(PUMP_WATER, True)
                    self.pump_running = True
                else:
                    safe_gpio_output(PUMP_WATER, False)
                    self.pump_running = False
        
                if self.pump_running and time.time() - pump_timer > 300:
                    print("‚ö†Ô∏è M√°y b∆°m ch·∫°y qu√° l√¢u, t·ª± ƒë·ªông t·∫Øt!")
                    safe_gpio_output(PUMP_WATER, False)
                    self.pump_running = False

            time.sleep(1)

    def control_nutrient(self):
        """Lu·ªìng ƒëi·ªÅu khi·ªÉn b·ªï sung dinh d∆∞·ª°ng"""
        global ph_value
        while self.running:
            if not self.system_on:
                safe_gpio_output(VALVE_NUTRIENT, False)
                self.nutrient_running = False
                time.sleep(5)
                continue

            with self.lock:
                safe_gpio_output(VALVE_NUTRIENT, ph_value < self.ph_min_threshold or ph_value > self.ph_max_threshold)
                self.nutrient_running = ph_value < self.ph_min_threshold or ph_value > self.ph_max_threshold
            time.sleep(1)

    def blink_led(self):
        """Lu·ªìng nh·∫•p nh√°y LED b√°o tr·∫°ng th√°i"""
        while self.running:
            if not self.system_on:
                safe_gpio_output(LED_BLINK, False)
                time.sleep(5)
                continue

            safe_gpio_output(LED_BLINK, True)
            time.sleep(1)
            safe_gpio_output(LED_BLINK, False)
            time.sleep(1)

    def gpio_handler(self):
        """Lu·ªìng ch√≠nh c·∫≠p nh·∫≠t GPIO t·ª´ queue"""
        while self.running:
            while not queue_gpio.empty():
                try:
                    pin, state = queue_gpio.get()
                    GPIO.output(pin, state)
                except RuntimeError:
                    print("‚ö†Ô∏è L·ªói c·∫≠p nh·∫≠t GPIO, h·ªá th·ªëng s·∫Ω d·ª´ng!")
                    self.stop_system()
            time.sleep(1)

    def set_threshold(self, new_threshold):
        self.threshold = new_threshold
        print(f"üîÑ Ng∆∞·ª°ng m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t: {self.threshold}")

    def start_threads(self):
        """B·∫Øt ƒë·∫ßu c√°c lu·ªìng"""
        threading.Thread(target=self.read_sensors, daemon=True).start()
        threading.Thread(target=self.control_pump, daemon=True).start()
        threading.Thread(target=self.control_nutrient, daemon=True).start()
        threading.Thread(target=self.blink_led, daemon=True).start()
        threading.Thread(target=self.gpio_handler, daemon=True).start()

    def stop_system(self):
        print("‚èπ D·ª´ng h·ªá th·ªëng!")
        self.running = False
        safe_gpio_output(PUMP_WATER, False)
        safe_gpio_output(VALVE_NUTRIENT, False)
        safe_gpio_output(LED_INDICATOR, False)
        safe_gpio_output(LED_BLINK, False)
        self.client.loop_stop()
        disable_wifi_ap() 
        GPIO.cleanup()
        sys.exit(0)

@app.route("/toggle_system", methods=["POST"])
def toggle_system():
    garden.load_config()  # Load l·∫°i c·∫•u h√¨nh v√†o bi·∫øn trong class
    settings = {
        "system_on": garden.system_on   
    }
    print(f"üìå Tr∆∞·ªõc khi ƒë·ªïi tr·∫°ng th√°i: {settings['system_on']}")

    settings["system_on"] = not settings.get("system_on", False)  # ƒê·∫£o tr·∫°ng th√°i
    print(f"üîÑ Sau khi ƒë·ªïi tr·∫°ng th√°i: {settings['system_on']}")

    # Ch·∫°y GPIO n·∫øu tr√™n Raspberry Pi
    if platform.system() == "Linux":
        GPIO.output(17, GPIO.HIGH if settings["system_on"] else GPIO.LOW)
    else:
        print(f"üñ•Ô∏è Gi·∫£ l·∫≠p: {'B·∫≠t' if settings['system_on'] else 'T·∫Øt'} h·ªá th·ªëng!")

    garden.save_config()    
    
    # Ki·ªÉm tra file l∆∞u c√≥ ƒë√∫ng kh√¥ng
    with open("config.json", "r") as file:
        saved_data = json.load(file)
        print(f"üìÇ Ki·ªÉm tra file JSON sau khi ghi: {saved_data}")
    time.sleep(2)
    return jsonify({"system_on": settings["system_on"]})

if __name__ == "__main__":
    try:
        garden = SmartGarden()  # Kh·ªüi ƒë·ªông h·ªá th·ªëng ch√≠nh

        # Ch·∫°y Flask trong Thread
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()

        # Ch·ªù Flask kh·ªüi ƒë·ªông
        time.sleep(2)
        flask_ready = False
        for i in range(5):
            try:
                response = requests.get("http://127.0.0.1:5000/settings", timeout=3)
                if response.status_code == 200:
                    print("‚úÖ Flask ƒë√£ s·∫µn s√†ng:", response.json())
                    flask_ready = True
                    break
            except (requests.ConnectionError, requests.Timeout):
                print(f"‚è≥ ƒêang ch·ªù Flask kh·ªüi ƒë·ªông... ({i+1}/10)")
            time.sleep(1)

        if not flask_ready:
            print("üö´ L·ªói: Flask kh√¥ng kh·ªüi ƒë·ªông sau 10 gi√¢y!")
            sys.exit(1)

        # Ch·∫°y ch∆∞∆°ng tr√¨nh ch√≠nh
        while True:
            time.sleep(1)

    except KeyboardInterrupt:
        print("‚èπ D·ª´ng h·ªá th·ªëng do ng∆∞·ªùi d√πng nh·∫•n Ctrl+C!")
        garden.stop_system()
        sys.exit(0)  # Tho√°t ch∆∞∆°ng tr√¨nh an to√†n
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói kh√¥ng mong mu·ªën: {e}\n‚èπ D·ª´ng h·ªá th·ªëng!")
        garden.stop_system()
        sys.exit(1)